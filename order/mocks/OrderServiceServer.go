// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	order_grpc "github.com/rigmas/microservices/order/handlers/order_grpc"
	mock "github.com/stretchr/testify/mock"
)

// OrderServiceServer is an autogenerated mock type for the OrderServiceServer type
type OrderServiceServer struct {
	mock.Mock
}

// OrderList provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) OrderList(_a0 context.Context, _a1 *order_grpc.OrderListRequest) (*order_grpc.OrderListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *order_grpc.OrderListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order_grpc.OrderListRequest) *order_grpc.OrderListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order_grpc.OrderListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order_grpc.OrderListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedOrderServiceServer provides a mock function with given fields:
func (_m *OrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewOrderServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderServiceServer creates a new instance of OrderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderServiceServer(t mockConstructorTestingTNewOrderServiceServer) *OrderServiceServer {
	mock := &OrderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
